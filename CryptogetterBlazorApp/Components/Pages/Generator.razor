@page "/"
@rendermode InteractiveServer
@attribute [Authorize(Policy = "GeneratorAccessPolicy")]

@using System.Drawing
@using System.Drawing.Imaging
@using System.IO
@using CryptogetterBlazorApp.CryptoGetter
@using CryptogetterBlazorApp.LogDb
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using ZXing
@using ZXing.Common
@using ZXing.Windows.Compatibility

@inject IJSRuntime JSRuntime
@inject CodeExtractor CodeExtractor
@inject CryptogetterBlazorApp.LogDb.AppDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3 class="mb-4">Генератор кодов Datamatrix</h3>

<div class="mb-3">
    <label for="kizInput" class="form-label">КИЗ:</label>
    <input id="kizInput" class="form-control" @bind="Kiz" placeholder="Введите КИЗ (GTIN + SN)" />
</div>

<div class="mb-3">
    <label for="recipientInput" class="form-label">Наименование организации запросившей код:</label>
    <input id="recipientInput" class="form-control" @bind="Recipient" placeholder="Введите получателя" />
</div>

<button class="btn btn-primary mt-3" style="width: 300px;" @onclick="GenerateImage">Сгенерировать изображение</button>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-4">@ErrorMessage</div>
}

@if (!string.IsNullOrEmpty(ImageUrl))
{
    <div class="image-output mt-4" style="display: flex; flex-direction: column;">
        <img src="@ImageUrl" alt="Generated Image" style="max-width: 300px;" />
        <button class="btn btn-secondary mt-4" style="width: 300px;" @onclick="SaveImage">Сохранить в файл</button>
    </div>
}

@code {
    private string Kiz { get; set; } = "";
    private string Recipient { get; set; } = "";
    private string ImageUrl { get; set; } = "";
    private string ErrorMessage { get; set; } = "";
    private byte[]? ImageBytes { get; set; }
    private string? userName;
    
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userName = user.Identity?.Name ?? "Not authenticated";
        Console.WriteLine($"User: {userName}");
    }

    private async Task GenerateImage()
    {
        ErrorMessage = "";
        ImageUrl = "";

        if (string.IsNullOrEmpty(Kiz) || string.IsNullOrEmpty(Recipient))
        {
            ErrorMessage = "Пожалуйста, заполните все поля.";
            StateHasChanged();
            return;
        }

        try
        {
            if (Kiz.Length != 27)
            {
                ErrorMessage = "Неверная длина КИЗ (должна быть 27 символов).";
                StateHasChanged();
                return;
            }

            (string data, string serverName) = await CodeExtractor.ExtractCode(Kiz);

            await Task.Run(() =>
            {
                var writer = new BarcodeWriter<Bitmap>
                {
                    Format = BarcodeFormat.DATA_MATRIX,
                    Options = new EncodingOptions
                    {
                        Width = 300,
                        Height = 300
                    },
                    Renderer = new BitmapRenderer()
                };

                using (var bitmap = writer.Write(data))
                using (var stream = new MemoryStream())
                {
                    bitmap.Save(stream, ImageFormat.Png);
                    ImageBytes = stream.ToArray();
                    ImageUrl = $"data:image/png;base64,{Convert.ToBase64String(ImageBytes)}";
                }
            });

            // Логирование в базу данных
            var logEntry = new CodeGenerationLog
            {
                UserName = userName ?? "Unknown",
                RequestDateTime = DateTime.UtcNow,
                Kiz = Kiz,
                Recipient = Recipient,
                ServerName = serverName
            };
            DbContext.CodeGenerationLogs.Add(logEntry);
            await DbContext.SaveChangesAsync();

            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task SaveImage()
    {
        if (ImageBytes == null)
        {
            ErrorMessage = "Сначала сгенерируйте изображение.";
            StateHasChanged();
            return;
        }

        try
        {
            using (var ms = new MemoryStream(ImageBytes))
            using (var bitmap = new Bitmap(ms))
            using (var bmpStream = new MemoryStream())
            {
                bitmap.Save(bmpStream, ImageFormat.Bmp);
                var bmpBytes = bmpStream.ToArray();
                var base64String = Convert.ToBase64String(bmpBytes);
                await JSRuntime.InvokeVoidAsync("saveAsFile", $"{Kiz}.bmp", base64String);
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Ошибка при сохранении: {ex.Message}";
            StateHasChanged();
        }
    }
}

<script>
    window.saveAsFile = (filename, base64String) => {
        const byteCharacters = atob(base64String);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: 'image/bmp' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = filename;
        link.click();
        URL.revokeObjectURL(link.href);
    };
</script>